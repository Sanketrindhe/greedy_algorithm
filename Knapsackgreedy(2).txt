// Knapsack greedy approach 
//SHUBHAM PADHI TIB38
#include<iostream>
using namespace std;



int Profit(double arr[101][101], int n, int W) {
    double TP = 0.0;
    
    while (W > 0) {
        double maxRatio = -1.0;
        int index = -1;
        
     
        for (int i = 0; i < n; ++i) {
            if (arr[i][2] != -1) { 
                double currentRatio = arr[i][0] / arr[i][1];
                if (currentRatio > maxRatio) {
                    maxRatio = currentRatio;
                    index = i;
                }
            }
        }
        
        if (index == -1) break; 
        
        
        if (arr[index][1] <= W) {
            TP += arr[index][0];
            W -= arr[index][1];
        } else {
            TP += arr[index][0] * (W / arr[index][1]);
            break;
        }
        
        
        arr[index][2] = -1;
    }
    
    return TP;
}

int main(){
    int W;
    cout<<"\n Enter capacity of knapsack";
    cin>>W;
    double arr[101][101];
    int n;
    cout<<"\n Enter profit and weight";
    cin>>n;
    
    for(int i=0;i<n;i++){
        cin>> arr[i][0] >> arr[i][1];
        arr[i][2]=arr[i][0]/arr[i][1];


    }
    double Maxprofit=Profit(arr,n,W);
    
    cout<<"\n Maxprofit is:"<<Maxprofit;
}


output is
codebind@CODEBIND:~$ g++ Knapsack21724.cpp
codebind@CODEBIND:~$ ./a.out

 Enter capacity of knapsack15

 Enter profit and weight7
5 1
10 3
15 5
7 4
8 1
9 3
4 2

 Maxprofit is:51c
